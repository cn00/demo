---
--- Generated by Luanalysis
--- Created by cn.
--- DateTime: 2021/2/1 3:06 PM
---

local CS = CS
local UnityEngine = CS.UnityEngine
local GameObject = UnityEngine.GameObject
local util = require "utility.util"
local xutil = require "utility.xlua.util"
local sqlite = require("lsqlite3")

local config = require("common.config.config")


local print = function ( ... )
    _G.print("datasys", ... )
end

if AppGlobal and AppGlobal.Datasys then return AppGlobal.Datasys end -- singleton

local this = {
    userdb = nil,
    datadb = nil,
    datacache = {},
}
local datasys = this
AppGlobal.Datasys = this

function datasys.initdb()
    local userdb = sqlite.open(config.userDbPath)
    datasys.userdb = userdb
    local sql = [[CREATE TABLE IF NOT EXISTS "history" (
            "id"	INTEGER NOT NULL UNIQUE,
            "a"	INTEGER NOT NULL DEFAULT 0,
            "b"	INTEGER NOT NULL DEFAULT 0,
            "na"	TEXT,
            "nb"	TEXT,
            "dt"	INTEGER NOT NULL DEFAULT 0,
            "date"	TEXT NOT NULL,
            PRIMARY KEY("id" AUTOINCREMENT)
        );]]
    userdb:exec(sql)

    local datadb = sqlite.open(config.dbCachePath)
    datasys.datadb = datadb
end

---getdata
---@param stable string
---@param fields table
---@param filter string|nil
---@return table
local function get(db, stable, fields, filter)
    filter = filter or ""
    local t = {}
    local sql = string.format([[select %s from %s %s]], table.concat(fields, ","), stable, filter)
    print(#t, sql)
    for row in db:nrows(sql) do
        t[1+#t] = row
    end
    this.datacache[sql] = t
    return t
end

local function update(db, strtab, records, filter)
    local keys , values= {}, {}
    for k, v in pairs(records) do
        keys[1+#keys] = k
        values[1+#values] = "'" .. v .. "'"
    end
    local sql = string.format([[update %s (%s) VALUES (%s) %s]]
        , strtab, table.concat(keys, ", "), table.concat(values, ","), filter)
    assert(sqlite.OK == db:exec(sql), db:errmsg())
end

---getdata
---@param stable string
---@param fields table
---@param filter string sql
function datasys.getdata(stable, fields, filter)
    return get(this.datadb, stable, fields, filter)
end
function datasys.getuser(stable, fields, filter)
    return get(this.userdb, stable, fields, filter)
end

function datasys.updateData(strtab, records, filter)
    update(this.datadb, strtab, records, filter)
end

function datasys.updateUser(strtab, records, filter)
    update(this.userdb, strtab, records, filter)
end

function datasys.getUserPoetry()

end

function datasys.Start()
    this.initdb()
end

function datasys.Destroy()
    this.datadb:close()
    this.userdb:close()
end

return datasys